basePath: /
definitions:
  data.Car:
    properties:
      mark:
        type: string
      model:
        type: string
      owner:
        $ref: '#/definitions/data.Owner'
      regNum:
        type: string
      year:
        type: integer
    type: object
  data.Owner:
    properties:
      name:
        type: string
      patronymic:
        type: string
      surname:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is an example of a car catalog API.
  title: Car catalog
  version: 1.0.0
paths:
  /cars:
    get:
      consumes:
      - application/json
      description: Retrieve a list of cars with optional filtering and pagination
      parameters:
      - description: Filter by registration number
        in: query
        name: regNum
        type: string
      - description: Filter by car mark
        in: query
        name: mark
        type: string
      - description: Filter by car model
        in: query
        name: model
        type: string
      - description: Filter by car year
        in: query
        name: year
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/data.Car'
            type: array
        "500":
          description: '{"error": "Failed to get cars"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a list of cars
      tags:
      - cars
    post:
      consumes:
      - application/json
      description: Add a new car to the database using registration numbers
      parameters:
      - description: Array of registration numbers
        in: body
        name: regNums
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Car(s) added successfully
          schema:
            $ref: '#/definitions/data.Car'
        "400":
          description: '{"error": "Invalid request payload"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: '{"error": "Car with this regNum already exists"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error": "Failed to add car or check existing owner"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Add a new car
      tags:
      - cars
  /cars/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a car from the database by its registration number
      parameters:
      - description: Registration number of the car to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Car deleted successfully"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error": "Failed to delete car"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a car
      tags:
      - cars
    put:
      consumes:
      - application/json
      description: Update a car by registration number
      parameters:
      - description: Registration number of the car
        in: path
        name: id
        required: true
        type: string
      - description: Car data
        in: body
        name: car
        required: true
        schema:
          $ref: '#/definitions/data.Car'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Car updated successfully"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{"error": "Invalid request payload"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error": "Failed to update car"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update car
      tags:
      - cars
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
